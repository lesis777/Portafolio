{"ast":null,"code":"var _jsxFileName = \"/home/vboxuser/Desktop/REACT/demo3/src/components/PokemonDataTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PokemonDataTable() {\n  _s();\n  const [pokemonData, setPokemonData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    fetch('https://pokeapi.co/api/v2/pokemon/ditto').then(response => response.json()).then(data => {\n      setPokemonData({\n        id: data.id,\n        name: data.name,\n        height: data.height,\n        weight: data.weight,\n        abilities: data.abilities.map(ability => ability.ability.name).join(', '),\n        types: data.types.map(type => type.type.name).join(', ')\n      });\n      setIsLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setIsLoading(false);\n    });\n  }, []); // Vaciamos el array de dependencias para que useEffect solo se ejecute una vez al montar el componente\n\n  const columns = [{\n    Header: 'ID',\n    accessor: 'id'\n  }, {\n    Header: 'Name',\n    accessor: 'name'\n  }, {\n    Header: 'Height',\n    accessor: 'height'\n  }, {\n    Header: 'Weight',\n    accessor: 'weight'\n  }, {\n    Header: 'Abilities',\n    accessor: 'abilities'\n  }, {\n    Header: 'Types',\n    accessor: 'types'\n  }];\n  const data = [pokemonData];\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(PokemonDataTable, \"Gzc6Cq5KrzR7ddx16VBBsoBNBI0=\", false, function () {\n  return [useTable];\n});\n_c = PokemonDataTable;\nexport default PokemonDataTable;\nvar _c;\n$RefreshReg$(_c, \"PokemonDataTable\");","map":{"version":3,"names":["React","useState","useEffect","useTable","jsxDEV","_jsxDEV","PokemonDataTable","_s","pokemonData","setPokemonData","isLoading","setIsLoading","fetch","then","response","json","data","id","name","height","weight","abilities","map","ability","join","types","type","catch","error","console","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","children","fileName","_jsxFileName","lineNumber","columnNumber","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["/home/vboxuser/Desktop/REACT/demo3/src/components/PokemonDataTable.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTable } from 'react-table';\n\nfunction PokemonDataTable() {\n  const [pokemonData, setPokemonData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('https://pokeapi.co/api/v2/pokemon/ditto')\n      .then(response => response.json())\n      .then(data => {\n        setPokemonData({\n          id: data.id,\n          name: data.name,\n          height: data.height,\n          weight: data.weight,\n          abilities: data.abilities.map(ability => ability.ability.name).join(', '),\n          types: data.types.map(type => type.type.name).join(', ')\n        });\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setIsLoading(false);\n      });\n  }, []); // Vaciamos el array de dependencias para que useEffect solo se ejecute una vez al montar el componente\n\n  const columns = [\n    { Header: 'ID', accessor: 'id' },\n    { Header: 'Name', accessor: 'name' },\n    { Header: 'Height', accessor: 'height' },\n    { Header: 'Weight', accessor: 'weight' },\n    { Header: 'Abilities', accessor: 'abilities' },\n    { Header: 'Types', accessor: 'types' }\n  ];\n\n  const data = [pokemonData];\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({ columns, data });\n\n  return (\n    <div>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <table {...getTableProps()}>\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map(row => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  ))}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n\nexport default PokemonDataTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}